#if defined(PETSC_HAVE_FORTRAN_TYPE_STAR)
      Interface
       subroutine PetscSFBcastBegin(sf,unit,rarray,larray,op,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscMPIInt :: unit,op
          type(*) :: rarray(:)
          type(*) :: larray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFBcastBegin

      subroutine PetscSFBcastEnd(sf,unit,rarray,larray,op,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscMPIInt :: unit,op
          type(*) :: rarray(:)
          type(*) :: larray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFBcastEnd

      subroutine PetscSFReduceBegin(sf,unit,larray,rarray,op,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscMPIInt :: unit,op
          type(*) :: larray(:)
          type(*) :: rarray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFReduceBegin

      subroutine PetscSFReduceEnd(sf,unit,larray,rarray,op,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscMPIInt :: unit,op
          type(*) :: larray(:)
          type(*) :: rarray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFReduceEnd
      end Interface
#endif

      Interface
      subroutine PetscSFGetGraph(sf,nroots,nleaves,ilocal,iremote,ierr)
          import tPetscSF,PetscSFNode
          PetscSF :: sf
          PetscInt :: nroots,nleaves
          PetscInt, pointer :: ilocal(:)
          type(PetscSFNode), pointer :: iremote(:)
          PetscErrorCode :: ierr
      end Subroutine PetscSFGetGraph

      subroutine PetscSFGetLeafRanks(sf,niranks,iranks,ioffset,irootloc,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscInt :: niranks
          PetscMPIInt, pointer :: iranks(:)
          PetscInt, pointer :: ioffset(:),irootloc(:)
          PetscErrorCode :: ierr
      end Subroutine PetscSFGetLeafRanks

      subroutine PetscSFGetRootRanks(sf,nranks,ranks,roffset,rmine,rremote,ierr)
          import tPetscSF
          PetscSF :: sf
          PetscInt :: nranks
          PetscMPIInt, pointer :: ranks(:)
          PetscInt, pointer :: roffset(:),rmine(:),rremote(:)
          PetscErrorCode :: ierr
      end Subroutine PetscSFGetRootRanks
      end Interface

      Interface
        Subroutine VecGetArray(v,array,ierr)
          import tVec
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecRestoreArray(v,array,ierr)
          import tVec
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecGetArrayRead(v,array,ierr)
          import tVec
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecRestoreArrayRead(v,array,ierr)
          import tVec
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecGetValuesSection(v,s,p,va,ierr)
          import tVec,tPetscSection
          PetscScalar, pointer :: va(:)
          PetscErrorCode ierr
          Vec     v
          PetscSection s
          PetscInt p
        End Subroutine
      End Interface

      Interface
        Subroutine VecRestoreValuesSection(v,s,p,va,ierr)
          import tVec,tPetscSection
          PetscScalar, pointer :: va(:)
          PetscErrorCode ierr
          Vec     v
          PetscSection s
          PetscInt p
        End Subroutine
      End Interface

! -------------------------------------------------------------

      Interface
        Subroutine VecDuplicateVecs(v,m,vs,ierr)
          import tVec
          Vec, pointer :: vs(:)
          PetscInt m
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecDestroyVecs(m,vs,ierr)
          import tVec
          Vec, pointer :: vs(:)
          PetscInt m
          PetscErrorCode ierr
        End Subroutine
      end Interface

      Interface
      subroutine VecScatterRemap(a,b,c,ierr)
         import tVecScatter
         VecScatter a ! VecScatter
         PetscInt b (*) ! PetscInt
         PetscInt c (*) ! PetscInt
         PetscErrorCode ierr
       end subroutine

      end Interface
